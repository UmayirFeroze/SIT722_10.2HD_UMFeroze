trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '83f2b4e7-f504-4449-b9b9-b78f9a936531'
  imageRepository: 'bmdk4'
  containerRegistry: 'bmdk4.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'bmdk43101-auth'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build job
    pool:
      name: Default  # This uses your self-hosted agent pool
    steps:
    - script: |
            echo "Unsetting DOCKER_HOST"
            unset DOCKER_HOST
      displayName: 'Unset DOCKER_HOST'

    - script: |
            docker context use desktop-linux
            echo "Current Docker context:"
            docker context show
            docker info
      displayName: 'Check Docker Configuration'
    
    - script: |
            echo "Checking Docker daemon"
            docker info
            docker version
            docker ps
      displayName: 'Check Docker Daemon'
    
    - script: |
            echo "Current user: $(whoami)"
            echo "Docker socket permissions:"
            ls -l /Users/umairferoze/Library/Containers/com.docker.docker/Data/docker-cli.sock
            groups $(whoami)
      displayName: 'Check User and Permissions'

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - publish: $(System.DefaultWorkingDirectory)/manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      name: Default  # This uses your self-hosted agent pool
    environment: 'UmayirFerozeSIT722102HDUMFeroze.bmdk4'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: manifests
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)