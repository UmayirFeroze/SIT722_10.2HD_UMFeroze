trigger:
- main

resources:
- repo: self

variables:
- group: KeyVaultVariables

- name: dockerRegistryServiceConnection
  value: '83f2b4e7-f504-4449-b9b9-b78f9a936531'
- name: imageRepository
  value: 'bmdk4'
- name: containerRegistry
  value: '$(ACR_NAME)' 
- name: dockerfilePath
  value: '**/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
- name: imagePullSecret
  value: 'bmdk43101-auth'
- name: DOCKER_HOST
  value: 'unix:///System/Volumes/Data/Users/umairferoze/.docker/run/docker.sock'
- name: DOCKER_BUILDKIT
  value: 1

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build job
    pool:
      name: Default
    steps:
    - script: |
        echo "Current user: $(whoami)"
        echo "User groups: $(groups)"
        echo "Docker socket permissions:"
        ls -l /System/Volumes/Data/Users/umairferoze/.docker/run/docker.sock
        echo "DOCKER_HOST: $DOCKER_HOST"
      displayName: 'Check User and Permissions'
      
    - script: |
        echo "Docker context list:"
        docker context list
        echo "Setting Docker context to desktop-linux"
        docker context use desktop-linux
        echo "Current Docker context:"
        docker context show
      displayName: 'Set Docker Context'

    - script: |
        echo "Checking Docker daemon"
        docker info
        docker version
        docker ps
      displayName: 'Check Docker Daemon'
    
    - script: |
        echo "Testing Docker command:"
        docker run hello-world
      displayName: 'Test Docker Command'

    - script: |
        echo "Node.js version:"
        node --version
        echo "npm version:"
        npm --version
      displayName: 'Check Node.js and npm versions'

    - script: |
        echo "Contents of working directory:"
        ls -la
        echo "Contents of manifests directory:"
        ls -la manifests
      displayName: 'List Directory Contents'

    - script: |
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found. Running npm install to generate it."
          npm install
        else
          echo "package-lock.json found."
        fi
      displayName: 'Check and generate package-lock.json if needed'

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
        arguments: '--build-arg BUILDKIT_INLINE_CACHE=1'

    - publish: $(System.DefaultWorkingDirectory)/manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      name: Default  # This uses your self-hosted agent pool
    environment: 'UmayirFerozeSIT722102HDUMFeroze.bmdk4'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: manifests
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)